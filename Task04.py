"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ4
üìå –°–æ–∑–¥–∞–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
üìå –ü–∞—Ä–∞–º–µ—Ç—Ä - —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—É—Å–∫–æ–≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π
—Ñ—É–Ω–∫—Ü–∏–∏.
"""

from typing import Callable


def count(num: int = 1):
    def deco(func: Callable):
        def wrapper(*args, **kwargs):
            result = []
            for cnt in range(num):
                print(f'–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {func.__name__} # {cnt}')
                result.append(func(*args, **kwargs))
            return result

        return wrapper

    return deco


@count(5)
def attempt(num: int, cnt: int) -> bool:
    current_attempt: int = 0
    while current_attempt < cnt:
        num_from_console = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ -> "))
        if num_from_console == num:
            print("–í—ã —É–≥–∞–¥–∞–ª–∏")
            return True
        current_attempt += 1
        print("–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏")
    print("–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
    return False


print(attempt(25, 5))
