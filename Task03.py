"""
–ó–∞–¥–∞–Ω–∏–µ ‚Ññ3
üìå –ù–∞–ø–∏—à–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ json —Ñ–∞–π–ª
–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω–∞
–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç. –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω
—Ä–∞—Å—à–∏—Ä—è—Ç—å—Å—è, –∞ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è.
üìå –ö–∞–∂–¥—ã–π –∫–ª—é—á–µ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä —Å–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª—é—á
json —Å–ª–æ–≤–∞—Ä—è.
üìå –î–ª—è –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –º–æ–∂–µ—Ç
–ø—Ä–∏–Ω–∏–º–∞—Ç—å –∫–∞–∫ –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ, —Ç–∞–∫ –∏ –∫–ª—é—á–µ–≤—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã.
üìå –ò–º—è —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π
—Ñ—É–Ω–∫—Ü–∏–∏.
"""
import json
import os.path
from typing import Callable


def main(func: Callable):
    def wrapper(*args, **kwargs):
        num = None
        cnt = None
        if 'num' in kwargs.keys():
            num = kwargs['num']
        if 'cnt' in kwargs.keys():
            cnt = kwargs['cnt']
        if len(args) == 2:
            num = args[0]
            cnt = args[1]
        elif len(args) == 1:
            if num == None:
                num = args[0]
            else:
                cnt = args[0]
        result = func(*args, **kwargs)
        info = []
        path = func.__name__ + '.json'
        if os.path.exists(path):
            with open(path, 'r') as f:
                info = json.load(f)
        with open(path, 'w') as f:
            info.append({'num': num, 'cnt': cnt, 'result': result})
            json.dump(info, f, indent=4)
        return result

    return wrapper


def attemp(num: int, cnt: int) -> bool:
    current_attempt: int = 0
    while current_attempt < cnt:
        num_from_console = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ -> "))
        if num_from_console == num:
            return True
        current_attempt += 1
    return False


run = main(attemp)
if run(25, cnt=5):
    print("–í—ã —É–≥–∞–¥–∞–ª–∏")
else:
    print("–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")
